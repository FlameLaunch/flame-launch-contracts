{
  "address": "0xff2f4958b9d8c293c3103b74fb7a87c950ab6244",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract FlameToken",
          "name": "_flame",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flameToken",
      "outputs": [
        {
          "internalType": "contract FlameToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ee7c5d4ac85e19bb9ad232eb37a00f762b76f1b74430cdcfd0b90ee55651c80",
  "receipt": {
    "to": null,
    "from": "0x38c1d08a6e7acb3a1693cb1b963fc6217ae190d0",
    "contractAddress": "0xff2f4958b9d8c293c3103b74fb7a87c950ab6244",
    "transactionIndex": "0x15",
    "gasUsed": "0x3dd72b4",
    "logsBloom": "0x3f316aacddc5925ff7cfd75d8edfd6fc7b9bef896bd907fa57864fa71b1299f39f175ff942e9fefbb657c1ec846ddd7f1aaabdc267adb7efb5a1fbded437c3b8d5ddb3af4ebda4d9eedfff7f7ae4db6cdd7f3988f84691f759a7e72f9b7e16dbff809f77678866fe32fea34f7b78ce41e8ae7d34e6fbd684d5ae0c3e5ffe3afe38ef67df281788331b97bee5753bbfb79a8e1b3f6eaef66bf6ecf37cc94c8cee967f157febeee9dbfd06dbbeefe73b3b645dedaf8fe5b1f9e6eb7e0d3435ee5d4fbdbfb3c73a1f953fef7dbccbbff85e58f97bdecf3485f8fff05feb4b9b6b3ba29de237fa863565583d7f919cfefaed5aff96929c9bbd667f2d0dd98f9c4c3c",
    "blockHash": "0x58200d3bf96a5bd103d06a6ba877cade4ebe8489c75b9625bdc17cee1a4354b3",
    "transactionHash": "0x4ee7c5d4ac85e19bb9ad232eb37a00f762b76f1b74430cdcfd0b90ee55651c80",
    "logs": [],
    "blockNumber": "0x297f3d",
    "cumulativeGasUsed": "0x0",
    "status": "0x1"
  },
  "args": [
    "0x0676b34337b80A412220A9319364ED0d9dF380Ed",
    "FLT Wrapped Available",
    "FLTAvail"
  ],
  "numDeployments": 1,
  "solcInputHash": "504ebe416e39f4c6c1b59b843ccd765e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract FlameToken\",\"name\":\"_flame\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flameToken\",\"outputs\":[{\"internalType\":\"contract FlameToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TestWrapperToken.sol\":\"TestWrappedAvailableToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Flame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract FlameToken is ERC20, Ownable {\\r\\n    using Math for uint256;\\r\\n    uint8 public constant ReleaseLinearIn1YearAfter1Year = 0;\\r\\n    uint8 public constant ReleaseLinearIn1YearAfter2Year = 1;\\r\\n    uint8 public constant Release334For2Month = 2; // [0.3,0.3,0.4]\\r\\n    uint8 public constant Release1For10Month = 3; // [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]\\r\\n    uint8 public constant ReleaseAllAfter1Year = 4;\\r\\n    uint256 public UPLINE_AT;\\r\\n    uint256 private _totalLock = 0;\\r\\n    struct Locker {\\r\\n        uint256 lock;\\r\\n        uint256 claimed;\\r\\n    }\\r\\n    struct FlameLocker {\\r\\n        bool lockTransferable;\\r\\n        Locker[5] locks;\\r\\n    }\\r\\n    mapping(address => FlameLocker) private lockMap;\\r\\n\\r\\n    constructor() ERC20(\\\"Flame Launch Token\\\", \\\"FLT\\\") {\\r\\n        UPLINE_AT = block.timestamp + 15 days;\\r\\n        address tech = 0x5E75662eCcC9c3E3B18A0F357Fd381ef92ad5a02;\\r\\n        address ecology = 0xBEFe05a040d2De72B7e05a9D16F19f13D2618169;\\r\\n        address airdrop1 = 0xac2a152F5b48fB7A6810dD1DB711202d1774d2Be;\\r\\n        address airdrop2 = 0x0c86FDDdf379d52c3a51E9043c9403e418F51CEE;\\r\\n        address ido5 = 0x7174C2f0406568C8a80Bc73138519B632f00E52f;\\r\\n        address ido2 = 0xa8c94AAA594834BE2Dab9716004a0D18775FdD20;\\r\\n        address pe = 0xdC5f0a39ADbb8f5003BE2FF36697cB14eFb9d9F0;\\r\\n        address fluidity = 0x47cdA56d5Cf829320e9FE849e84eC533bA93B929;\\r\\n        address treasury = 0x2BDe6965ddC07eAFddb6cce0db9039aCE2848ac8;\\r\\n        _lock(tech, ReleaseLinearIn1YearAfter2Year, 12e7 * 1e18);\\r\\n        _lock(ecology, ReleaseLinearIn1YearAfter1Year, 30e7 * 1e18);\\r\\n        _mint(airdrop1, 10e7 * 1e18);\\r\\n        _mint(airdrop2, 10e7 * 1e18);\\r\\n        _lock(ido2, Release334For2Month, 2e7 * 1e18);\\r\\n        _lock(ido5, Release334For2Month, 5e7 * 1e18);\\r\\n        _lock(pe, Release1For10Month, 3e7 * 1e18);\\r\\n        _mint(fluidity, 8e7 * 1e18);\\r\\n        _lock(treasury, ReleaseAllAfter1Year, 20e7 * 1e18);\\r\\n    }\\r\\n\\r\\n    function claim() public {\\r\\n        _claimAll();\\r\\n    }\\r\\n\\r\\n    function transferLock(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[5] memory transform\\r\\n    ) public {\\r\\n        require(\\r\\n            lockMap[from].lockTransferable,\\r\\n            \\\"from address can't tranfer lock\\\"\\r\\n        );\\r\\n        address operator = _msgSender();\\r\\n        if (from != operator) {\\r\\n            uint256 spend = 0;\\r\\n            for (uint256 i = 0; i < transform.length; i++) {\\r\\n                spend += transform[i];\\r\\n            }\\r\\n            require(spend > 0, \\\"spend zero allowance\\\");\\r\\n            _spendAllowance(from, operator, spend);\\r\\n        }\\r\\n        _safeTransferLock(from, to, transform);\\r\\n    }\\r\\n\\r\\n    function setLockTransferable(address account, bool a) public onlyOwner {\\r\\n        _setLockTransferable(account, a);\\r\\n    }\\r\\n\\r\\n    function setUplineTime(uint256 at) public onlyOwner {\\r\\n        _setUplineTime(at);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        uint256 balance = super.balanceOf(account);\\r\\n        balance += lockOf(account);\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function availableOf(address account) public view returns (uint256) {\\r\\n        return super.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function lockOf(address account) public view returns (uint256 balance) {\\r\\n        FlameLocker memory flamelock = lockMap[account];\\r\\n        Locker memory locker = flamelock.locks[ReleaseLinearIn1YearAfter1Year];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n        locker = flamelock.locks[ReleaseLinearIn1YearAfter2Year];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n        locker = flamelock.locks[Release334For2Month];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n        locker = flamelock.locks[Release1For10Month];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n        locker = flamelock.locks[ReleaseAllAfter1Year];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n    }\\r\\n\\r\\n    function balanceDetailOf(\\r\\n        address account,\\r\\n        uint8 ltype\\r\\n    ) public view returns (uint total, uint claimed, uint256 claimable) {\\r\\n        FlameLocker memory flamelock = lockMap[account];\\r\\n        Locker memory locker = flamelock.locks[ltype];\\r\\n        total = locker.lock;\\r\\n        claimed = locker.claimed;\\r\\n        claimable = _claimableOf(ltype, locker);\\r\\n    }\\r\\n\\r\\n    function totalLock() public view returns (uint256) {\\r\\n        return _totalLock;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return super.totalSupply() + _totalLock;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        if (super.balanceOf(from) < amount && !lockMap[from].lockTransferable)\\r\\n            _claimAll();\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _lock(address to, uint8 ltype, uint256 amount) internal {\\r\\n        FlameLocker storage flamelock = lockMap[to];\\r\\n        flamelock.locks[ltype].lock += amount;\\r\\n        _totalLock += amount;\\r\\n        _setLockTransferable(to, true);\\r\\n        emit TransferLock(address(this), address(0), to, ltype, amount);\\r\\n    }\\r\\n\\r\\n    function _claimAll() internal {\\r\\n        uint256 amount = 0;\\r\\n        FlameLocker storage flamelock = lockMap[_msgSender()];\\r\\n        amount += _claimingOf(ReleaseLinearIn1YearAfter1Year, flamelock);\\r\\n        amount += _claimingOf(ReleaseLinearIn1YearAfter2Year, flamelock);\\r\\n        amount += _claimingOf(Release334For2Month, flamelock);\\r\\n        amount += _claimingOf(Release1For10Month, flamelock);\\r\\n        amount += _claimingOf(ReleaseAllAfter1Year, flamelock);\\r\\n        require(amount > 0, \\\"no token can claim\\\");\\r\\n        _totalLock -= amount;\\r\\n        _mint(_msgSender(), amount);\\r\\n        //console.log('%f',amount);\\r\\n    }\\r\\n\\r\\n    function _claimingOf(\\r\\n        uint8 ltype,\\r\\n        FlameLocker storage flamelock\\r\\n    ) internal returns (uint256) {\\r\\n        Locker storage locker = flamelock.locks[ltype];\\r\\n        (uint256 claimable, uint256 released) = _unclaimedOf(ltype, locker);\\r\\n        if (claimable > 0) {\\r\\n            locker.claimed = released;\\r\\n        }\\r\\n        return claimable;\\r\\n    }\\r\\n\\r\\n    function _unclaimedOf(\\r\\n        uint8 ltype,\\r\\n        Locker memory locker\\r\\n    ) internal view returns (uint256 claimable, uint256 released) {\\r\\n        if (locker.lock > locker.claimed) {\\r\\n            if (ltype == ReleaseLinearIn1YearAfter1Year) {\\r\\n                if (block.timestamp - UPLINE_AT >= 365 days) {\\r\\n                    uint256 era = (block.timestamp - UPLINE_AT - 365 days) /\\r\\n                        30 days;\\r\\n                    uint256 rate = (era + 1).min(12);\\r\\n                    released = (locker.lock * rate) / 12;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            } else if (ltype == ReleaseLinearIn1YearAfter2Year) {\\r\\n                if (block.timestamp - UPLINE_AT >= 365 days * 2) {\\r\\n                    uint256 era = (block.timestamp - UPLINE_AT - 365 days * 2) /\\r\\n                        30 days;\\r\\n                    uint256 rate = (era + 1).min(12);\\r\\n                    released = (locker.lock * rate) / 12;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            } else if (ltype == Release334For2Month) {\\r\\n                if (block.timestamp >= UPLINE_AT) {\\r\\n                    uint256 era = (block.timestamp - UPLINE_AT) / (30 days);\\r\\n                    uint8[3] memory map = [3, 6, 10];\\r\\n                    uint256 rate = map[era.min(map.length - 1)];\\r\\n                    released = (locker.lock * rate) / 10;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            } else if (ltype == Release1For10Month) {\\r\\n                if (block.timestamp >= UPLINE_AT) {\\r\\n                    uint256 era = (block.timestamp - UPLINE_AT) / (30 days);\\r\\n                    uint256 rate = (era + 1).min(10);\\r\\n                    released = (locker.lock * rate) / 10;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            } else if (ltype == ReleaseAllAfter1Year) {\\r\\n                if (block.timestamp >= UPLINE_AT) {\\r\\n                    released = locker.lock;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return (0, 0);\\r\\n    }\\r\\n\\r\\n    function _claimableOf(\\r\\n        uint8 ltype,\\r\\n        Locker memory locker\\r\\n    ) internal view returns (uint256 claimable) {\\r\\n        (claimable, ) = _unclaimedOf(ltype, locker);\\r\\n    }\\r\\n\\r\\n    function _safeTransferLock(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[5] memory transform\\r\\n    ) internal virtual {\\r\\n        require(to != address(0), \\\"transfer to the zero address\\\");\\r\\n        address operator = _msgSender();\\r\\n        FlameLocker storage fromlock = lockMap[from];\\r\\n        FlameLocker storage tolock = lockMap[to];\\r\\n        for (uint8 i = 0; i < transform.length; i++) {\\r\\n            if (transform[i] == 0) continue;\\r\\n            require(\\r\\n                transform[i] <= fromlock.locks[i].lock,\\r\\n                \\\"lock balance not enough\\\"\\r\\n            );\\r\\n            if (transform[i] == fromlock.locks[i].lock) {\\r\\n                require(\\r\\n                    tolock.locks[i].claimed == 0 && tolock.locks[i].lock == 0,\\r\\n                    \\\"to address can't accept lock ownership\\\"\\r\\n                );\\r\\n                tolock.locks[i].lock = fromlock.locks[i].lock;\\r\\n                tolock.locks[i].claimed = fromlock.locks[i].claimed;\\r\\n                fromlock.locks[i].lock = 0;\\r\\n                fromlock.locks[i].claimed = 0;\\r\\n            } else {\\r\\n                require(\\r\\n                    fromlock.locks[i].claimed == 0,\\r\\n                    \\\"from address can't transfer lock\\\"\\r\\n                );\\r\\n                require(\\r\\n                    tolock.locks[i].claimed == 0,\\r\\n                    \\\"to address can't transfer lock\\\"\\r\\n                );\\r\\n                fromlock.locks[i].lock -= transform[i];\\r\\n                tolock.locks[i].lock += transform[i];\\r\\n            }\\r\\n            emit TransferLock(operator, from, to, i, transform[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setLockTransferable(address account, bool a) internal {\\r\\n        lockMap[account].lockTransferable = a;\\r\\n        emit LockTransferableChanged(account, a);\\r\\n    }\\r\\n\\r\\n    function _setUplineTime(uint256 at) internal {\\r\\n        require(\\r\\n            at > block.timestamp && block.timestamp < UPLINE_AT,\\r\\n            \\\"invalid time\\\"\\r\\n        );\\r\\n        emit UplineTimeChanged(at);\\r\\n    }\\r\\n\\r\\n    event TransferLock(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint8 ltype,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event LockTransferableChanged(address account, bool can);\\r\\n\\r\\n    event UplineTimeChanged(uint256 timestamp);\\r\\n}\\r\\n\",\"keccak256\":\"0xe0dcfc19c86b0eee9d88f6c77a20b758e6a2f61fc69a8ff627b299f7f133d7fd\",\"license\":\"MIT\"},\"contracts/TestWrapperToken.sol\":{\"content\":\"import \\\"./Flame.sol\\\";\\r\\n\\r\\ncontract TestWrappedAvailableToken {\\r\\n    FlameToken public immutable flameToken;\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public immutable decimals;\\r\\n\\r\\n    constructor(FlameToken _flame,string memory _name,string memory _symbol) {\\r\\n        flameToken = _flame;\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _flame.decimals();\\r\\n    }\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return flameToken.availableOf(account);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6a144b6cac00ad0910d88483b483db12a152baebec9e6eab07de006e00867cbd\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161075b38038061075b83398101604081905261002f91610182565b6001600160a01b0383166080526000610048838261028d565b506001610055828261028d565b50826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b8919061034c565b60ff1660a05250610376915050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126100ee57600080fd5b81516001600160401b0380821115610108576101086100c7565b604051601f8301601f19908116603f01168101908282118183101715610130576101306100c7565b8160405283815260209250868385880101111561014c57600080fd5b600091505b8382101561016e5785820183015181830184015290820190610151565b600093810190920192909252949350505050565b60008060006060848603121561019757600080fd5b83516001600160a01b03811681146101ae57600080fd5b60208501519093506001600160401b03808211156101cb57600080fd5b6101d7878388016100dd565b935060408601519150808211156101ed57600080fd5b506101fa868287016100dd565b9150509250925092565b600181811c9082168061021857607f821691505b60208210810361023857634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561028857600081815260208120601f850160051c810160208610156102655750805b601f850160051c820191505b8181101561028457828155600101610271565b5050505b505050565b81516001600160401b038111156102a6576102a66100c7565b6102ba816102b48454610204565b8461023e565b602080601f8311600181146102ef57600084156102d75750858301515b600019600386901b1c1916600185901b178555610284565b600085815260208120601f198616915b8281101561031e578886015182559484019460019091019084016102ff565b508582101561033c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561035e57600080fd5b815160ff8116811461036f57600080fd5b9392505050565b60805160a0516103bb6103a06000396000608f01526000818160e9015261020e01526103bb6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806370a082311161005057806370a08231146100c35780637a754b23146100e457806395d89b411461013057600080fd5b806306fdde031461006c578063313ce5671461008a575b600080fd5b610074610138565b604051610081919061028e565b60405180910390f35b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610081565b6100d66100d13660046102dc565b6101c6565b604051908152602001610081565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610081565b610074610281565b6000805461014590610319565b80601f016020809104026020016040519081016040528092919081815260200182805461017190610319565b80156101be5780601f10610193576101008083540402835291602001916101be565b820191906000526020600020905b8154815290600101906020018083116101a157829003601f168201915b505050505081565b6040517fd546da9000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d546da9090602401602060405180830381865afa158015610257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027b919061036c565b92915050565b6001805461014590610319565b600060208083528351808285015260005b818110156102bb5785810183015185820160400152820161029f565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156102ee57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461031257600080fd5b9392505050565b600181811c9082168061032d57607f821691505b602082108103610366577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561037e57600080fd5b505191905056fea26469706673582212200e81ad602c01efae4d5dbcddade18685652318c6688fba594fef513fc6138c0764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806370a082311161005057806370a08231146100c35780637a754b23146100e457806395d89b411461013057600080fd5b806306fdde031461006c578063313ce5671461008a575b600080fd5b610074610138565b604051610081919061028e565b60405180910390f35b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610081565b6100d66100d13660046102dc565b6101c6565b604051908152602001610081565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610081565b610074610281565b6000805461014590610319565b80601f016020809104026020016040519081016040528092919081815260200182805461017190610319565b80156101be5780601f10610193576101008083540402835291602001916101be565b820191906000526020600020905b8154815290600101906020018083116101a157829003601f168201915b505050505081565b6040517fd546da9000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d546da9090602401602060405180830381865afa158015610257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027b919061036c565b92915050565b6001805461014590610319565b600060208083528351808285015260005b818110156102bb5785810183015185820160400152820161029f565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156102ee57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461031257600080fd5b9392505050565b600181811c9082168061032d57607f821691505b602082108103610366577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561037e57600080fd5b505191905056fea26469706673582212200e81ad602c01efae4d5dbcddade18685652318c6688fba594fef513fc6138c0764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5571,
        "contract": "contracts/TestWrapperToken.sol:TestWrappedAvailableToken",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 5573,
        "contract": "contracts/TestWrapperToken.sol:TestWrappedAvailableToken",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}