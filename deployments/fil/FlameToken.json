{
  "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "can",
          "type": "bool"
        }
      ],
      "name": "LockTransferableChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "ltype",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferLock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UplineTimeChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Release1For10Month",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Release334For2Month",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ReleaseAllAfter1Year",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ReleaseLinearIn1YearAfter1Year",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ReleaseLinearIn1YearAfter2Year",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPLINE_AT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "availableOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "ltype",
          "type": "uint8"
        }
      ],
      "name": "balanceDetailOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lockOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "a",
          "type": "bool"
        }
      ],
      "name": "setLockTransferable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "setUplineTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[5]",
          "name": "transform",
          "type": "uint256[5]"
        }
      ],
      "name": "transferLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
  "receipt": {
    "to": null,
    "from": "0x38C1d08A6e7acb3a1693cb1b963Fc6217Ae190D0",
    "contractAddress": "0x186ac0678f35361d5676e183278029c84472B2E7",
    "transactionIndex": 61,
    "gasUsed": "109654200",
    "logsBloom": "0x262ca0918204002d32412654d82342391c4a43424844a921018d66c99c3013080138c944680b41b0868ec00148448750b4de05d401019023082008108d36834a1a815d24cc008003daa108b83af7023682372a02b4c497994a4c80c19b244ca2820a100907ad02180518ec4075b24a201d04460c0839b5620998a2115648ac418040b0a192900db1ba024cc152802271cb09960303f062383a3516704324aca1bfb61600c04421af520202939e001e98782d520804c743212d80c194a2762e21840468831c02c820af68c3062826f914213e84026812e4909ab232034940624f0c11910c60840029983ec308e94c828c71581ea1423a5854851302068844782a",
    "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8",
    "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000038c1d08a6e7acb3a1693cb1b963fc6217ae190d0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71"
        ],
        "data": "0x0000000000000000000000005e75662eccc9c3e3b18a0f357fd381ef92ad5a020000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c445"
        ],
        "data": "0x000000000000000000000000186ac0678f35361d5676e183278029c84472b2e700000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e75662eccc9c3e3b18a0f357fd381ef92ad5a0200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000006342fd08f00f6378000000",
        "logIndex": 2,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71"
        ],
        "data": "0x000000000000000000000000befe05a040d2de72b7e05a9d16f19f13d26181690000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 3,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c445"
        ],
        "data": "0x000000000000000000000000186ac0678f35361d5676e183278029c84472b2e70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000befe05a040d2de72b7e05a9d16f19f13d26181690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f8277896582678ac000000",
        "logIndex": 4,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac2a152f5b48fb7a6810dd1db711202d1774d2be"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
        "logIndex": 5,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000c86fdddf379d52c3a51e9043c9403e418f51cee"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
        "logIndex": 6,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71"
        ],
        "data": "0x000000000000000000000000a8c94aaa594834be2dab9716004a0d18775fdd200000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 7,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c445"
        ],
        "data": "0x000000000000000000000000186ac0678f35361d5676e183278029c84472b2e70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8c94aaa594834be2dab9716004a0d18775fdd200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000108b2a2c28029094000000",
        "logIndex": 8,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71"
        ],
        "data": "0x0000000000000000000000007174c2f0406568c8a80bc73138519b632f00e52f0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 9,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c445"
        ],
        "data": "0x000000000000000000000000186ac0678f35361d5676e183278029c84472b2e700000000000000000000000000000000000000000000000000000000000000000000000000000000000000007174c2f0406568c8a80bc73138519b632f00e52f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000295be96e64066972000000",
        "logIndex": 10,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71"
        ],
        "data": "0x000000000000000000000000dc5f0a39adbb8f5003be2ff36697cb14efb9d9f00000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 11,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c445"
        ],
        "data": "0x000000000000000000000000186ac0678f35361d5676e183278029c84472b2e70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dc5f0a39adbb8f5003be2ff36697cb14efb9d9f0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000018d0bf423c03d8de000000",
        "logIndex": 12,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000047cda56d5cf829320e9fe849e84ec533ba93b929"
        ],
        "data": "0x000000000000000000000000000000000000000000422ca8b0a00a4250000000",
        "logIndex": 13,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71"
        ],
        "data": "0x0000000000000000000000002bde6965ddc07eafddb6cce0db9039ace2848ac80000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 14,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 2760204,
        "transactionHash": "0xd191002eb7fddca6e388a8d512be7640cb1d545548f56091766a003ebcde2b92",
        "address": "0x186ac0678f35361d5676e183278029c84472B2E7",
        "topics": [
          "0x282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c445"
        ],
        "data": "0x000000000000000000000000186ac0678f35361d5676e183278029c84472b2e700000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bde6965ddc07eafddb6cce0db9039ace2848ac80000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000a56fa5b99019a5c8000000",
        "logIndex": 15,
        "blockHash": "0x864bdc2d3f1b24d8f31f2aaa9b041cd5cdcc91103184ed4b26636df7e7b2cbf8"
      }
    ],
    "blockNumber": 2760204,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "17bec542f859992c0781d325e45cfcd6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"can\",\"type\":\"bool\"}],\"name\":\"LockTransferableChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"ltype\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UplineTimeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Release1For10Month\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Release334For2Month\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReleaseAllAfter1Year\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReleaseLinearIn1YearAfter1Year\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReleaseLinearIn1YearAfter2Year\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPLINE_AT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"ltype\",\"type\":\"uint8\"}],\"name\":\"balanceDetailOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"setLockTransferable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"setUplineTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"transform\",\"type\":\"uint256[5]\"}],\"name\":\"transferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Flame.sol\":\"FlameToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Flame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract FlameToken is ERC20, Ownable {\\r\\n    using Math for uint256;\\r\\n    uint8 public constant ReleaseLinearIn1YearAfter1Year = 0;\\r\\n    uint8 public constant ReleaseLinearIn1YearAfter2Year = 1;\\r\\n    uint8 public constant Release334For2Month = 2; // [0.3,0.3,0.4]\\r\\n    uint8 public constant Release1For10Month = 3; // [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]\\r\\n    uint8 public constant ReleaseAllAfter1Year = 4;\\r\\n    uint256 public UPLINE_AT;\\r\\n    uint256 private _totalLock = 0;\\r\\n    struct Locker {\\r\\n        uint256 lock;\\r\\n        uint256 claimed;\\r\\n    }\\r\\n    struct FlameLocker {\\r\\n        bool lockTransferable;\\r\\n        Locker[5] locks;\\r\\n    }\\r\\n    mapping(address => FlameLocker) private lockMap;\\r\\n\\r\\n    constructor() ERC20(\\\"Flame Launch Token\\\", \\\"FLT\\\") {\\r\\n        UPLINE_AT = block.timestamp + 15 days;\\r\\n        address tech = 0x5E75662eCcC9c3E3B18A0F357Fd381ef92ad5a02;\\r\\n        address ecology = 0xBEFe05a040d2De72B7e05a9D16F19f13D2618169;\\r\\n        address airdrop1 = 0xac2a152F5b48fB7A6810dD1DB711202d1774d2Be;\\r\\n        address airdrop2 = 0x0c86FDDdf379d52c3a51E9043c9403e418F51CEE;\\r\\n        address ido5 = 0x7174C2f0406568C8a80Bc73138519B632f00E52f;\\r\\n        address ido2 = 0xa8c94AAA594834BE2Dab9716004a0D18775FdD20;\\r\\n        address pe = 0xdC5f0a39ADbb8f5003BE2FF36697cB14eFb9d9F0;\\r\\n        address fluidity = 0x47cdA56d5Cf829320e9FE849e84eC533bA93B929;\\r\\n        address treasury = 0x2BDe6965ddC07eAFddb6cce0db9039aCE2848ac8;\\r\\n        _lock(tech, ReleaseLinearIn1YearAfter2Year, 12e7 * 1e18);\\r\\n        _lock(ecology, ReleaseLinearIn1YearAfter1Year, 30e7 * 1e18);\\r\\n        _mint(airdrop1, 10e7 * 1e18);\\r\\n        _mint(airdrop2, 10e7 * 1e18);\\r\\n        _lock(ido2, Release334For2Month, 2e7 * 1e18);\\r\\n        _lock(ido5, Release334For2Month, 5e7 * 1e18);\\r\\n        _lock(pe, Release1For10Month, 3e7 * 1e18);\\r\\n        _mint(fluidity, 8e7 * 1e18);\\r\\n        _lock(treasury, ReleaseAllAfter1Year, 20e7 * 1e18);\\r\\n    }\\r\\n\\r\\n    function claim() public {\\r\\n        _claimAll();\\r\\n    }\\r\\n\\r\\n    function transferLock(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[5] memory transform\\r\\n    ) public {\\r\\n        require(\\r\\n            lockMap[from].lockTransferable,\\r\\n            \\\"from address can't tranfer lock\\\"\\r\\n        );\\r\\n        address operator = _msgSender();\\r\\n        if (from != operator) {\\r\\n            uint256 spend = 0;\\r\\n            for (uint256 i = 0; i < transform.length; i++) {\\r\\n                spend += transform[i];\\r\\n            }\\r\\n            require(spend > 0, \\\"spend zero allowance\\\");\\r\\n            _spendAllowance(from, operator, spend);\\r\\n        }\\r\\n        _safeTransferLock(from, to, transform);\\r\\n    }\\r\\n\\r\\n    function setLockTransferable(address account, bool a) public onlyOwner {\\r\\n        _setLockTransferable(account, a);\\r\\n    }\\r\\n\\r\\n    function setUplineTime(uint256 at) public onlyOwner {\\r\\n        _setUplineTime(at);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        uint256 balance = super.balanceOf(account);\\r\\n        balance += lockOf(account);\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function availableOf(address account) public view returns (uint256) {\\r\\n        return super.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function lockOf(address account) public view returns (uint256 balance) {\\r\\n        FlameLocker memory flamelock = lockMap[account];\\r\\n        Locker memory locker = flamelock.locks[ReleaseLinearIn1YearAfter1Year];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n        locker = flamelock.locks[ReleaseLinearIn1YearAfter2Year];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n        locker = flamelock.locks[Release334For2Month];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n        locker = flamelock.locks[Release1For10Month];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n        locker = flamelock.locks[ReleaseAllAfter1Year];\\r\\n        balance += locker.lock - locker.claimed;\\r\\n    }\\r\\n\\r\\n    function balanceDetailOf(\\r\\n        address account,\\r\\n        uint8 ltype\\r\\n    ) public view returns (uint total, uint claimed, uint256 claimable) {\\r\\n        FlameLocker memory flamelock = lockMap[account];\\r\\n        Locker memory locker = flamelock.locks[ltype];\\r\\n        total = locker.lock;\\r\\n        claimed = locker.claimed;\\r\\n        claimable = _claimableOf(ltype, locker);\\r\\n    }\\r\\n\\r\\n    function totalLock() public view returns (uint256) {\\r\\n        return _totalLock;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return super.totalSupply() + _totalLock;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        if (super.balanceOf(from) < amount && !lockMap[from].lockTransferable)\\r\\n            _claimAll();\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _lock(address to, uint8 ltype, uint256 amount) internal {\\r\\n        FlameLocker storage flamelock = lockMap[to];\\r\\n        flamelock.locks[ltype].lock += amount;\\r\\n        _totalLock += amount;\\r\\n        _setLockTransferable(to, true);\\r\\n        emit TransferLock(address(this), address(0), to, ltype, amount);\\r\\n    }\\r\\n\\r\\n    function _claimAll() internal {\\r\\n        uint256 amount = 0;\\r\\n        FlameLocker storage flamelock = lockMap[_msgSender()];\\r\\n        amount += _claimingOf(ReleaseLinearIn1YearAfter1Year, flamelock);\\r\\n        amount += _claimingOf(ReleaseLinearIn1YearAfter2Year, flamelock);\\r\\n        amount += _claimingOf(Release334For2Month, flamelock);\\r\\n        amount += _claimingOf(Release1For10Month, flamelock);\\r\\n        amount += _claimingOf(ReleaseAllAfter1Year, flamelock);\\r\\n        require(amount > 0, \\\"no token can claim\\\");\\r\\n        _totalLock -= amount;\\r\\n        _mint(_msgSender(), amount);\\r\\n        //console.log('%f',amount);\\r\\n    }\\r\\n\\r\\n    function _claimingOf(\\r\\n        uint8 ltype,\\r\\n        FlameLocker storage flamelock\\r\\n    ) internal returns (uint256) {\\r\\n        Locker storage locker = flamelock.locks[ltype];\\r\\n        (uint256 claimable, uint256 released) = _unclaimedOf(ltype, locker);\\r\\n        if (claimable > 0) {\\r\\n            locker.claimed = released;\\r\\n        }\\r\\n        return claimable;\\r\\n    }\\r\\n\\r\\n    function _unclaimedOf(\\r\\n        uint8 ltype,\\r\\n        Locker memory locker\\r\\n    ) internal view returns (uint256 claimable, uint256 released) {\\r\\n        if (locker.lock > locker.claimed) {\\r\\n            if (ltype == ReleaseLinearIn1YearAfter1Year) {\\r\\n                if (block.timestamp - UPLINE_AT >= 365 days) {\\r\\n                    uint256 era = (block.timestamp - UPLINE_AT - 365 days) /\\r\\n                        30 days;\\r\\n                    uint256 rate = (era + 1).min(12);\\r\\n                    released = (locker.lock * rate) / 12;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            } else if (ltype == ReleaseLinearIn1YearAfter2Year) {\\r\\n                if (block.timestamp - UPLINE_AT >= 365 days * 2) {\\r\\n                    uint256 era = (block.timestamp - UPLINE_AT - 365 days * 2) /\\r\\n                        30 days;\\r\\n                    uint256 rate = (era + 1).min(12);\\r\\n                    released = (locker.lock * rate) / 12;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            } else if (ltype == Release334For2Month) {\\r\\n                if (block.timestamp >= UPLINE_AT) {\\r\\n                    uint256 era = (block.timestamp - UPLINE_AT) / (30 days);\\r\\n                    uint8[3] memory map = [3, 6, 10];\\r\\n                    uint256 rate = map[era.min(map.length - 1)];\\r\\n                    released = (locker.lock * rate) / 10;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            } else if (ltype == Release1For10Month) {\\r\\n                if (block.timestamp >= UPLINE_AT) {\\r\\n                    uint256 era = (block.timestamp - UPLINE_AT) / (30 days);\\r\\n                    uint256 rate = (era + 1).min(10);\\r\\n                    released = (locker.lock * rate) / 10;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            } else if (ltype == ReleaseAllAfter1Year) {\\r\\n                if (block.timestamp >= UPLINE_AT) {\\r\\n                    released = locker.lock;\\r\\n                    claimable = released - locker.claimed;\\r\\n                    return (claimable, released);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return (0, 0);\\r\\n    }\\r\\n\\r\\n    function _claimableOf(\\r\\n        uint8 ltype,\\r\\n        Locker memory locker\\r\\n    ) internal view returns (uint256 claimable) {\\r\\n        (claimable, ) = _unclaimedOf(ltype, locker);\\r\\n    }\\r\\n\\r\\n    function _safeTransferLock(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[5] memory transform\\r\\n    ) internal virtual {\\r\\n        require(to != address(0), \\\"transfer to the zero address\\\");\\r\\n        address operator = _msgSender();\\r\\n        FlameLocker storage fromlock = lockMap[from];\\r\\n        FlameLocker storage tolock = lockMap[to];\\r\\n        for (uint8 i = 0; i < transform.length; i++) {\\r\\n            if (transform[i] == 0) continue;\\r\\n            require(\\r\\n                transform[i] <= fromlock.locks[i].lock,\\r\\n                \\\"lock balance not enough\\\"\\r\\n            );\\r\\n            if (transform[i] == fromlock.locks[i].lock) {\\r\\n                require(\\r\\n                    tolock.locks[i].claimed == 0 && tolock.locks[i].lock == 0,\\r\\n                    \\\"to address can't accept lock ownership\\\"\\r\\n                );\\r\\n                tolock.locks[i].lock = fromlock.locks[i].lock;\\r\\n                tolock.locks[i].claimed = fromlock.locks[i].claimed;\\r\\n                fromlock.locks[i].lock = 0;\\r\\n                fromlock.locks[i].claimed = 0;\\r\\n            } else {\\r\\n                require(\\r\\n                    fromlock.locks[i].claimed == 0,\\r\\n                    \\\"from address can't transfer lock\\\"\\r\\n                );\\r\\n                require(\\r\\n                    tolock.locks[i].claimed == 0,\\r\\n                    \\\"to address can't transfer lock\\\"\\r\\n                );\\r\\n                fromlock.locks[i].lock -= transform[i];\\r\\n                tolock.locks[i].lock += transform[i];\\r\\n            }\\r\\n            emit TransferLock(operator, from, to, i, transform[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setLockTransferable(address account, bool a) internal {\\r\\n        lockMap[account].lockTransferable = a;\\r\\n        emit LockTransferableChanged(account, a);\\r\\n    }\\r\\n\\r\\n    function _setUplineTime(uint256 at) internal {\\r\\n        require(\\r\\n            at > block.timestamp && block.timestamp < UPLINE_AT,\\r\\n            \\\"invalid time\\\"\\r\\n        );\\r\\n        UPLINE_AT = at;\\r\\n        emit UplineTimeChanged(at);\\r\\n    }\\r\\n\\r\\n    event TransferLock(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint8 ltype,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event LockTransferableChanged(address account, bool can);\\r\\n\\r\\n    event UplineTimeChanged(uint256 timestamp);\\r\\n}\\r\\n\",\"keccak256\":\"0x0b5734ed3d33c1ca1f7507c98ec5080111ee705cdf505c90fcdbdfac7675ae06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006007553480156200001657600080fd5b5060405180604001604052806012815260200171233630b6b2902630bab731b4102a37b5b2b760711b8152506040518060400160405280600381526020016211931560ea1b81525081600390816200006f919062000552565b5060046200007e828262000552565b5050506200009b620000956200025460201b60201c565b62000258565b620000aa426213c6806200061e565b600655735e75662eccc9c3e3b18a0f357fd381ef92ad5a0273befe05a040d2de72b7e05a9d16f19f13d261816973ac2a152f5b48fb7a6810dd1db711202d1774d2be730c86fdddf379d52c3a51e9043c9403e418f51cee737174c2f0406568c8a80bc73138519b632f00e52f73a8c94aaa594834be2dab9716004a0d18775fdd2073dc5f0a39adbb8f5003be2ff36697cb14efb9d9f07347cda56d5cf829320e9fe849e84ec533ba93b929732bde6965ddc07eafddb6cce0db9039ace2848ac8620001838960016a6342fd08f00f6378000000620002aa565b6200019c8860006af8277896582678ac000000620002aa565b620001b3876a52b7d2dcc80cd2e400000062000380565b620001ca866a52b7d2dcc80cd2e400000062000380565b620001e38460026a108b2a2c28029094000000620002aa565b620001fc8560026a295be96e64066972000000620002aa565b620002158360036a18d0bf423c03d8de000000620002aa565b6200022c826a422ca8b0a00a425000000062000380565b620002458160046aa56fa5b99019a5c8000000620002aa565b5050505050505050506200065c565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383166000908152600860205260409020816001820160ff851660058110620002de57620002de62000646565b600202018054600090620002f49084906200061e565b9250508190555081600760008282546200030f91906200061e565b9091555062000322905084600162000446565b60408051308152600060208201526001600160a01b0386168183015260ff851660608201526080810184905290517f282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c4459181900360a00190a150505050565b6001600160a01b038216620003db5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620003ef91906200061e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216600081815260086020908152604091829020805460ff19168515159081179091558251938452908301527f8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71910160405180910390a15050565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620004d957607f821691505b602082108103620004fa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004a957600081815260208120601f850160051c81016020861015620005295750805b601f850160051c820191505b818110156200054a5782815560010162000535565b505050505050565b81516001600160401b038111156200056e576200056e620004ae565b62000586816200057f8454620004c4565b8462000500565b602080601f831160018114620005be5760008415620005a55750858301515b600019600386901b1c1916600185901b1785556200054a565b600085815260208120601f198616915b82811015620005ef57888601518255948401946001909101908401620005ce565b50858210156200060e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200064057634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052603260045260246000fd5b611d65806200066c6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a9059cbb11610097578063d546da9011610071578063d546da9014610374578063dd62ed3e14610387578063f2fde38b146103c0578063f54012e8146103d357600080fd5b8063a9059cbb14610346578063b2d30ccb14610359578063bcbb78ff1461036c57600080fd5b806395d89b41116100d357806395d89b41146102f4578063986fa76e146102fc5780639bee3af114610305578063a457c2d71461033357600080fd5b806370a08231146102be578063715018a6146102d15780638da5cb5b146102d957600080fd5b80633a1aae35116101665780635a46d3b5116101405780635a46d3b5146102885780635b5ee44c1461029b5780635dacc5ec146102a35780636490afa3146102ab57600080fd5b80633a1aae35146102705780633bf9ec70146102785780634e71d92d1461028057600080fd5b806323b872dd116101a257806323b872dd146102205780633125b7c914610233578063313ce56714610248578063395093511461025d57600080fd5b806306fdde03146101c9578063095ea7b3146101e757806318160ddd1461020a575b600080fd5b6101d16103db565b6040516101de91906119d6565b60405180910390f35b6101fa6101f5366004611a40565b61046d565b60405190151581526020016101de565b610212610487565b6040519081526020016101de565b6101fa61022e366004611a6a565b6104a4565b610246610241366004611aa6565b6104c8565b005b60125b60405160ff90911681526020016101de565b6101fa61026b366004611a40565b6104dc565b600754610212565b61024b600381565b61024661051b565b610212610296366004611abf565b610525565b61024b600081565b61024b600281565b6102466102b9366004611af0565b61067e565b6102126102cc366004611abf565b6107ad565b6102466107e0565b6005546040516001600160a01b0390911681526020016101de565b6101d16107f2565b61021260065481565b610318610313366004611b91565b610801565b604080519384526020840192909252908201526060016101de565b6101fa610341366004611a40565b6108d3565b6101fa610354366004611a40565b61097d565b610246610367366004611bce565b61098b565b61024b600181565b610212610382366004611abf565b6109a1565b610212610395366004611bff565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102466103ce366004611abf565b6109bf565b61024b600481565b6060600380546103ea90611c32565b80601f016020809104026020016040519081016040528092919081815260200182805461041690611c32565b80156104635780601f1061043857610100808354040283529160200191610463565b820191906000526020600020905b81548152906001019060200180831161044657829003601f168201915b5050505050905090565b60003361047b818585610a4c565b60019150505b92915050565b600060075461049560025490565b61049f9190611c82565b905090565b6000336104b2858285610ba4565b6104bd858585610c30565b506001949350505050565b6104d0610c93565b6104d981610ced565b50565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061047b9082908690610516908790611c82565b610a4c565b610523610d84565b565b6001600160a01b038116600090815260086020908152604080832081518083018352815460ff1615158152825160a08101909352849390929083019060018301600586835b828210156105a657838260020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061056a565b505050915250506020818101515190810151815192935090916105c99190611cab565b6105d39084611c82565b6020838101518101519081015181519295509092506105f191611cab565b6105fb9084611c82565b6020838101516040015190810151815192955090925061061a91611cab565b6106249084611c82565b6020838101516060015190810151815192955090925061064391611cab565b61064d9084611c82565b6020838101516080015190810151815192955090925061066c91611cab565b6106769084611c82565b949350505050565b6001600160a01b03831660009081526008602052604090205460ff166106eb5760405162461bcd60e51b815260206004820152601f60248201527f66726f6d20616464726573732063616e2774207472616e666572206c6f636b0060448201526064015b60405180910390fd5b336001600160a01b038416811461079c576000805b600581101561073e5783816005811061071b5761071b611c95565b602002015161072a9083611c82565b91508061073681611cbe565b915050610700565b506000811161078f5760405162461bcd60e51b815260206004820152601460248201527f7370656e64207a65726f20616c6c6f77616e636500000000000000000000000060448201526064016106e2565b61079a858383610ba4565b505b6107a7848484610e77565b50505050565b6001600160a01b0381166000908152602081905260408120546107cf83610525565b6107d99082611c82565b9392505050565b6107e8610c93565b610523600061137b565b6060600480546103ea90611c32565b6001600160a01b038216600090815260086020908152604080832081518083018352815460ff1615158152825160a081019093528493849384939183019060018301600586835b82821015610884578382600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610848565b50505050815250509050600081602001518660ff16600581106108a9576108a9611c95565b6020020151905080600001519450806020015193506108c886826113e5565b925050509250925092565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156109705760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106e2565b6104bd8286868403610a4c565b60003361047b818585610c30565b610993610c93565b61099d82826113f9565b5050565b6001600160a01b038116600090815260208190526040812054610481565b6109c7610c93565b6001600160a01b038116610a435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106e2565b6104d98161137b565b6001600160a01b038316610ac75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b038216610b435760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146107a75781811015610c235760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106e2565b6107a78484848403610a4c565b80610c50846001600160a01b031660009081526020819052604090205490565b108015610c7657506001600160a01b03831660009081526008602052604090205460ff16155b15610c8357610c83610d84565b610c8e83838361145c565b505050565b6005546001600160a01b031633146105235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106e2565b4281118015610cfd575060065442105b610d495760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642074696d65000000000000000000000000000000000000000060448201526064016106e2565b60068190556040518181527f9f45a413204c2bcec0b4a34a9e2356441d0e90c93bf57171b3e0daa76ca25ddd9060200160405180910390a150565b336000908152600860205260408120610d9d8282611649565b610da79083611c82565b9150610db4600182611649565b610dbe9083611c82565b9150610dcb600282611649565b610dd59083611c82565b9150610de2600382611649565b610dec9083611c82565b9150610df9600482611649565b610e039083611c82565b915060008211610e555760405162461bcd60e51b815260206004820152601260248201527f6e6f20746f6b656e2063616e20636c61696d000000000000000000000000000060448201526064016106e2565b8160076000828254610e679190611cab565b9091555061099d905033836116b2565b6001600160a01b038216610ecd5760405162461bcd60e51b815260206004820152601c60248201527f7472616e7366657220746f20746865207a65726f20616464726573730000000060448201526064016106e2565b6001600160a01b03838116600090815260086020526040808220928516825281203392915b60058160ff16101561137257848160ff1660058110610f1357610f13611c95565b60200201511561136057826001018160ff1660058110610f3557610f35611c95565b60020201548560ff831660058110610f4f57610f4f611c95565b60200201511115610fa25760405162461bcd60e51b815260206004820152601760248201527f6c6f636b2062616c616e6365206e6f7420656e6f75676800000000000000000060448201526064016106e2565b826001018160ff1660058110610fba57610fba611c95565b60020201548560ff831660058110610fd457610fd4611c95565b60200201510361115f57816001018160ff1660058110610ff657610ff6611c95565b600202016001015460001480156110275750816001018160ff166005811061102057611020611c95565b6002020154155b6110995760405162461bcd60e51b815260206004820152602660248201527f746f20616464726573732063616e277420616363657074206c6f636b206f776e60448201527f657273686970000000000000000000000000000000000000000000000000000060648201526084016106e2565b826001018160ff16600581106110b1576110b1611c95565b60020201546001830160ff8316600581106110ce576110ce611c95565b60020201556001830160ff8216600581106110eb576110eb611c95565b6002020160010154826001018260ff166005811061110b5761110b611c95565b60020201600101819055506000836001018260ff166005811061113057611130611c95565b600202015560006001840160ff83166005811061114f5761114f611c95565b60020201600101819055506112d5565b826001018160ff166005811061117757611177611c95565b60020201600101546000146111ce5760405162461bcd60e51b815260206004820181905260248201527f66726f6d20616464726573732063616e2774207472616e73666572206c6f636b60448201526064016106e2565b816001018160ff16600581106111e6576111e6611c95565b600202016001015460001461123d5760405162461bcd60e51b815260206004820152601e60248201527f746f20616464726573732063616e2774207472616e73666572206c6f636b000060448201526064016106e2565b848160ff166005811061125257611252611c95565b6020020151836001018260ff166005811061126f5761126f611c95565b600202018054600090611283908490611cab565b9091555085905060ff82166005811061129e5761129e611c95565b6020020151826001018260ff16600581106112bb576112bb611c95565b6002020180546000906112cf908490611c82565b90915550505b7f282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c44584888884898660ff166005811061130f5761130f611c95565b60200201516040516113579594939291906001600160a01b039586168152938516602085015291909316604083015260ff929092166060820152608081019190915260a00190565b60405180910390a15b8061136a81611cd7565b915050610ef2565b50505050505050565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006113f18383611771565b509392505050565b6001600160a01b038216600081815260086020908152604091829020805460ff19168515159081179091558251938452908301527f8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71910160405180910390a15050565b6001600160a01b0383166114d85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b0382166115545760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b038316600090815260208190526040902054818110156115e35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36107a7565b600080826001018460ff166005811061166457611664611c95565b600202019050600080611696868460405180604001604052908160008201548152602001600182015481525050611771565b909250905081156116a957600183018190555b50949350505050565b6001600160a01b0382166117085760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106e2565b806002600082825461171a9190611c82565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6000808260200151836000015111156119b25760ff8416611829576301e133806006544261179f9190611cab565b1061182457600062278d006301e13380600654426117bd9190611cab565b6117c79190611cab565b6117d19190611cf6565b905060006117eb600c6117e5846001611c82565b906119c0565b9050600c8186600001516117ff9190611d18565b6118099190611cf6565b925084602001518361181b9190611cab565b935050506119b9565b6119b2565b60001960ff851601611866576303c26700600654426118489190611cab565b1061182457600062278d006303c26700600654426117bd9190611cab565b60011960ff85160161192957600654421061182457600062278d006006544261188f9190611cab565b6118999190611cf6565b60408051606081018252600380825260066020830152600a9282019290925291925060009082906118d7906118d090600190611cab565b85906119c0565b600381106118e7576118e7611c95565b602002015160ff169050600a8187600001516119039190611d18565b61190d9190611cf6565b935085602001518461191f9190611cab565b94505050506119b9565b60021960ff85160161198457600654421061182457600062278d00600654426119529190611cab565b61195c9190611cf6565b90506000611970600a6117e5846001611c82565b9050600a8186600001516117ff9190611d18565b60031960ff8516016119b25760065442106119b25750815160208301516119ab9082611cab565b91506119b9565b5060009050805b9250929050565b60008183106119cf57816107d9565b5090919050565b600060208083528351808285015260005b81811015611a03578581018301518582016040015282016119e7565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611a3b57600080fd5b919050565b60008060408385031215611a5357600080fd5b611a5c83611a24565b946020939093013593505050565b600080600060608486031215611a7f57600080fd5b611a8884611a24565b9250611a9660208501611a24565b9150604084013590509250925092565b600060208284031215611ab857600080fd5b5035919050565b600060208284031215611ad157600080fd5b6107d982611a24565b634e487b7160e01b600052604160045260246000fd5b600080600060e08486031215611b0557600080fd5b611b0e84611a24565b92506020611b1d818601611a24565b925085605f860112611b2e57600080fd5b60405160a0810181811067ffffffffffffffff82111715611b5157611b51611ada565b6040528060e0870188811115611b6657600080fd5b604088015b81811015611b825780358352918401918401611b6b565b50505080925050509250925092565b60008060408385031215611ba457600080fd5b611bad83611a24565b9150602083013560ff81168114611bc357600080fd5b809150509250929050565b60008060408385031215611be157600080fd5b611bea83611a24565b915060208301358015158114611bc357600080fd5b60008060408385031215611c1257600080fd5b611c1b83611a24565b9150611c2960208401611a24565b90509250929050565b600181811c90821680611c4657607f821691505b602082108103611c6657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561048157610481611c6c565b634e487b7160e01b600052603260045260246000fd5b8181038181111561048157610481611c6c565b600060018201611cd057611cd0611c6c565b5060010190565b600060ff821660ff8103611ced57611ced611c6c565b60010192915050565b600082611d1357634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761048157610481611c6c56fea26469706673582212203737607203d0812d31a238fd9a424e013174d026d61bdfa99e29a01198d30ce264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a9059cbb11610097578063d546da9011610071578063d546da9014610374578063dd62ed3e14610387578063f2fde38b146103c0578063f54012e8146103d357600080fd5b8063a9059cbb14610346578063b2d30ccb14610359578063bcbb78ff1461036c57600080fd5b806395d89b41116100d357806395d89b41146102f4578063986fa76e146102fc5780639bee3af114610305578063a457c2d71461033357600080fd5b806370a08231146102be578063715018a6146102d15780638da5cb5b146102d957600080fd5b80633a1aae35116101665780635a46d3b5116101405780635a46d3b5146102885780635b5ee44c1461029b5780635dacc5ec146102a35780636490afa3146102ab57600080fd5b80633a1aae35146102705780633bf9ec70146102785780634e71d92d1461028057600080fd5b806323b872dd116101a257806323b872dd146102205780633125b7c914610233578063313ce56714610248578063395093511461025d57600080fd5b806306fdde03146101c9578063095ea7b3146101e757806318160ddd1461020a575b600080fd5b6101d16103db565b6040516101de91906119d6565b60405180910390f35b6101fa6101f5366004611a40565b61046d565b60405190151581526020016101de565b610212610487565b6040519081526020016101de565b6101fa61022e366004611a6a565b6104a4565b610246610241366004611aa6565b6104c8565b005b60125b60405160ff90911681526020016101de565b6101fa61026b366004611a40565b6104dc565b600754610212565b61024b600381565b61024661051b565b610212610296366004611abf565b610525565b61024b600081565b61024b600281565b6102466102b9366004611af0565b61067e565b6102126102cc366004611abf565b6107ad565b6102466107e0565b6005546040516001600160a01b0390911681526020016101de565b6101d16107f2565b61021260065481565b610318610313366004611b91565b610801565b604080519384526020840192909252908201526060016101de565b6101fa610341366004611a40565b6108d3565b6101fa610354366004611a40565b61097d565b610246610367366004611bce565b61098b565b61024b600181565b610212610382366004611abf565b6109a1565b610212610395366004611bff565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102466103ce366004611abf565b6109bf565b61024b600481565b6060600380546103ea90611c32565b80601f016020809104026020016040519081016040528092919081815260200182805461041690611c32565b80156104635780601f1061043857610100808354040283529160200191610463565b820191906000526020600020905b81548152906001019060200180831161044657829003601f168201915b5050505050905090565b60003361047b818585610a4c565b60019150505b92915050565b600060075461049560025490565b61049f9190611c82565b905090565b6000336104b2858285610ba4565b6104bd858585610c30565b506001949350505050565b6104d0610c93565b6104d981610ced565b50565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061047b9082908690610516908790611c82565b610a4c565b610523610d84565b565b6001600160a01b038116600090815260086020908152604080832081518083018352815460ff1615158152825160a08101909352849390929083019060018301600586835b828210156105a657838260020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061056a565b505050915250506020818101515190810151815192935090916105c99190611cab565b6105d39084611c82565b6020838101518101519081015181519295509092506105f191611cab565b6105fb9084611c82565b6020838101516040015190810151815192955090925061061a91611cab565b6106249084611c82565b6020838101516060015190810151815192955090925061064391611cab565b61064d9084611c82565b6020838101516080015190810151815192955090925061066c91611cab565b6106769084611c82565b949350505050565b6001600160a01b03831660009081526008602052604090205460ff166106eb5760405162461bcd60e51b815260206004820152601f60248201527f66726f6d20616464726573732063616e2774207472616e666572206c6f636b0060448201526064015b60405180910390fd5b336001600160a01b038416811461079c576000805b600581101561073e5783816005811061071b5761071b611c95565b602002015161072a9083611c82565b91508061073681611cbe565b915050610700565b506000811161078f5760405162461bcd60e51b815260206004820152601460248201527f7370656e64207a65726f20616c6c6f77616e636500000000000000000000000060448201526064016106e2565b61079a858383610ba4565b505b6107a7848484610e77565b50505050565b6001600160a01b0381166000908152602081905260408120546107cf83610525565b6107d99082611c82565b9392505050565b6107e8610c93565b610523600061137b565b6060600480546103ea90611c32565b6001600160a01b038216600090815260086020908152604080832081518083018352815460ff1615158152825160a081019093528493849384939183019060018301600586835b82821015610884578382600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610848565b50505050815250509050600081602001518660ff16600581106108a9576108a9611c95565b6020020151905080600001519450806020015193506108c886826113e5565b925050509250925092565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156109705760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106e2565b6104bd8286868403610a4c565b60003361047b818585610c30565b610993610c93565b61099d82826113f9565b5050565b6001600160a01b038116600090815260208190526040812054610481565b6109c7610c93565b6001600160a01b038116610a435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106e2565b6104d98161137b565b6001600160a01b038316610ac75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b038216610b435760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146107a75781811015610c235760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106e2565b6107a78484848403610a4c565b80610c50846001600160a01b031660009081526020819052604090205490565b108015610c7657506001600160a01b03831660009081526008602052604090205460ff16155b15610c8357610c83610d84565b610c8e83838361145c565b505050565b6005546001600160a01b031633146105235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106e2565b4281118015610cfd575060065442105b610d495760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642074696d65000000000000000000000000000000000000000060448201526064016106e2565b60068190556040518181527f9f45a413204c2bcec0b4a34a9e2356441d0e90c93bf57171b3e0daa76ca25ddd9060200160405180910390a150565b336000908152600860205260408120610d9d8282611649565b610da79083611c82565b9150610db4600182611649565b610dbe9083611c82565b9150610dcb600282611649565b610dd59083611c82565b9150610de2600382611649565b610dec9083611c82565b9150610df9600482611649565b610e039083611c82565b915060008211610e555760405162461bcd60e51b815260206004820152601260248201527f6e6f20746f6b656e2063616e20636c61696d000000000000000000000000000060448201526064016106e2565b8160076000828254610e679190611cab565b9091555061099d905033836116b2565b6001600160a01b038216610ecd5760405162461bcd60e51b815260206004820152601c60248201527f7472616e7366657220746f20746865207a65726f20616464726573730000000060448201526064016106e2565b6001600160a01b03838116600090815260086020526040808220928516825281203392915b60058160ff16101561137257848160ff1660058110610f1357610f13611c95565b60200201511561136057826001018160ff1660058110610f3557610f35611c95565b60020201548560ff831660058110610f4f57610f4f611c95565b60200201511115610fa25760405162461bcd60e51b815260206004820152601760248201527f6c6f636b2062616c616e6365206e6f7420656e6f75676800000000000000000060448201526064016106e2565b826001018160ff1660058110610fba57610fba611c95565b60020201548560ff831660058110610fd457610fd4611c95565b60200201510361115f57816001018160ff1660058110610ff657610ff6611c95565b600202016001015460001480156110275750816001018160ff166005811061102057611020611c95565b6002020154155b6110995760405162461bcd60e51b815260206004820152602660248201527f746f20616464726573732063616e277420616363657074206c6f636b206f776e60448201527f657273686970000000000000000000000000000000000000000000000000000060648201526084016106e2565b826001018160ff16600581106110b1576110b1611c95565b60020201546001830160ff8316600581106110ce576110ce611c95565b60020201556001830160ff8216600581106110eb576110eb611c95565b6002020160010154826001018260ff166005811061110b5761110b611c95565b60020201600101819055506000836001018260ff166005811061113057611130611c95565b600202015560006001840160ff83166005811061114f5761114f611c95565b60020201600101819055506112d5565b826001018160ff166005811061117757611177611c95565b60020201600101546000146111ce5760405162461bcd60e51b815260206004820181905260248201527f66726f6d20616464726573732063616e2774207472616e73666572206c6f636b60448201526064016106e2565b816001018160ff16600581106111e6576111e6611c95565b600202016001015460001461123d5760405162461bcd60e51b815260206004820152601e60248201527f746f20616464726573732063616e2774207472616e73666572206c6f636b000060448201526064016106e2565b848160ff166005811061125257611252611c95565b6020020151836001018260ff166005811061126f5761126f611c95565b600202018054600090611283908490611cab565b9091555085905060ff82166005811061129e5761129e611c95565b6020020151826001018260ff16600581106112bb576112bb611c95565b6002020180546000906112cf908490611c82565b90915550505b7f282ef86ebc86bbf945ce5816d7cceaa78b1356064a1b75bb2e28b727afe9c44584888884898660ff166005811061130f5761130f611c95565b60200201516040516113579594939291906001600160a01b039586168152938516602085015291909316604083015260ff929092166060820152608081019190915260a00190565b60405180910390a15b8061136a81611cd7565b915050610ef2565b50505050505050565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006113f18383611771565b509392505050565b6001600160a01b038216600081815260086020908152604091829020805460ff19168515159081179091558251938452908301527f8471f0edc2452c0226acdba770f2ec9dc5e69fa6883a4313205840e6d1f9cb71910160405180910390a15050565b6001600160a01b0383166114d85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b0382166115545760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b038316600090815260208190526040902054818110156115e35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106e2565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36107a7565b600080826001018460ff166005811061166457611664611c95565b600202019050600080611696868460405180604001604052908160008201548152602001600182015481525050611771565b909250905081156116a957600183018190555b50949350505050565b6001600160a01b0382166117085760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106e2565b806002600082825461171a9190611c82565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6000808260200151836000015111156119b25760ff8416611829576301e133806006544261179f9190611cab565b1061182457600062278d006301e13380600654426117bd9190611cab565b6117c79190611cab565b6117d19190611cf6565b905060006117eb600c6117e5846001611c82565b906119c0565b9050600c8186600001516117ff9190611d18565b6118099190611cf6565b925084602001518361181b9190611cab565b935050506119b9565b6119b2565b60001960ff851601611866576303c26700600654426118489190611cab565b1061182457600062278d006303c26700600654426117bd9190611cab565b60011960ff85160161192957600654421061182457600062278d006006544261188f9190611cab565b6118999190611cf6565b60408051606081018252600380825260066020830152600a9282019290925291925060009082906118d7906118d090600190611cab565b85906119c0565b600381106118e7576118e7611c95565b602002015160ff169050600a8187600001516119039190611d18565b61190d9190611cf6565b935085602001518461191f9190611cab565b94505050506119b9565b60021960ff85160161198457600654421061182457600062278d00600654426119529190611cab565b61195c9190611cf6565b90506000611970600a6117e5846001611c82565b9050600a8186600001516117ff9190611d18565b60031960ff8516016119b25760065442106119b25750815160208301516119ab9082611cab565b91506119b9565b5060009050805b9250929050565b60008183106119cf57816107d9565b5090919050565b600060208083528351808285015260005b81811015611a03578581018301518582016040015282016119e7565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611a3b57600080fd5b919050565b60008060408385031215611a5357600080fd5b611a5c83611a24565b946020939093013593505050565b600080600060608486031215611a7f57600080fd5b611a8884611a24565b9250611a9660208501611a24565b9150604084013590509250925092565b600060208284031215611ab857600080fd5b5035919050565b600060208284031215611ad157600080fd5b6107d982611a24565b634e487b7160e01b600052604160045260246000fd5b600080600060e08486031215611b0557600080fd5b611b0e84611a24565b92506020611b1d818601611a24565b925085605f860112611b2e57600080fd5b60405160a0810181811067ffffffffffffffff82111715611b5157611b51611ada565b6040528060e0870188811115611b6657600080fd5b604088015b81811015611b825780358352918401918401611b6b565b50505080925050509250925092565b60008060408385031215611ba457600080fd5b611bad83611a24565b9150602083013560ff81168114611bc357600080fd5b809150509250929050565b60008060408385031215611be157600080fd5b611bea83611a24565b915060208301358015158114611bc357600080fd5b60008060408385031215611c1257600080fd5b611c1b83611a24565b9150611c2960208401611a24565b90509250929050565b600181811c90821680611c4657607f821691505b602082108103611c6657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561048157610481611c6c565b634e487b7160e01b600052603260045260246000fd5b8181038181111561048157610481611c6c565b600060018201611cd057611cd0611c6c565b5060010190565b600060ff821660ff8103611ced57611ced611c6c565b60010192915050565b600082611d1357634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761048157610481611c6c56fea26469706673582212203737607203d0812d31a238fd9a424e013174d026d61bdfa99e29a01198d30ce264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 296,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 298,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 300,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 302,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3601,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "UPLINE_AT",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3604,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "_totalLock",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3622,
        "contract": "contracts/Flame.sol:FlameToken",
        "label": "lockMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(FlameLocker)3617_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Locker)3609_storage)5_storage": {
        "base": "t_struct(Locker)3609_storage",
        "encoding": "inplace",
        "label": "struct FlameToken.Locker[5]",
        "numberOfBytes": "320"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(FlameLocker)3617_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FlameToken.FlameLocker)",
        "numberOfBytes": "32",
        "value": "t_struct(FlameLocker)3617_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FlameLocker)3617_storage": {
        "encoding": "inplace",
        "label": "struct FlameToken.FlameLocker",
        "members": [
          {
            "astId": 3611,
            "contract": "contracts/Flame.sol:FlameToken",
            "label": "lockTransferable",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3616,
            "contract": "contracts/Flame.sol:FlameToken",
            "label": "locks",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Locker)3609_storage)5_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Locker)3609_storage": {
        "encoding": "inplace",
        "label": "struct FlameToken.Locker",
        "members": [
          {
            "astId": 3606,
            "contract": "contracts/Flame.sol:FlameToken",
            "label": "lock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3608,
            "contract": "contracts/Flame.sol:FlameToken",
            "label": "claimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}